#!/bin/lua
local version = "v0.8"

--===== load libs =====--
package.path = "libs/?.lua;" .. package.path

local lip = require("LIP")
local ut = require("UT")
local argparse = require("argparse")
local lfs = require("lfs")

local conf = lip.load("ltrs.ini")

--===== vars =====--
local tmpConfPath = "./tmp/conf"
local tmpExecOutput, tmpExecErrorOutput = "./tmp/exec_output", "./tmp/exec_error_output"

local rsnapshotConf
local conf, logfile
local log = {}

local fullArgList = ""

--===== parse args =====--
local args
do
    local parser = argparse("ltrs", "LifeTimedRSnapshot")
    
    parser:argument("tasks", "Tasks to do"):args("*"):target("tasks")
    
    parser:flag("-v --version", "Shows the ltrs version and exit."):action(function() 
        print("ltrs: " .. version)
        os.exit(0)
    end)

    parser:flag("-k --keep", "Keep the auto generatet temporary rsnapshot conf files."):target("keepTmpRsConfFiles")
    parser:flag("-v --verbose", "Prints out what it is doing."):target("verbose")
    parser:flag("-E --simulate-error", "Simulates an error and exits the program."):target("simulateError")

    parser:option("-c --conf", "Alternative ltrs config file.", "ltrs.ini"):target("confFile")
    parser:option("-s --rsconf", "Alternative rsnapshot config file.", "rsnapshot.conf"):target("rsConfFile")
    parser:option("-a --args", "Gives following args to rsnapshot.", ""):target("rsArgs")
    parser:option("-l --log", "Specify a custon logfile."):target("logfile")
    parser:option("-e --error", "Specify a custon onError script."):target("onError")

    args = parser:parse()
end

--===== functions =====--
local function exec(task, name, printErrorMsg)
    local suc, output, errOutput

    if args.verbose then
        log.write("[EXEC]: " .. task)
    end
    
    suc = select(3, os.execute(task .. " > " .. tmpExecOutput .. " 2> " .. tmpExecErrorOutput))

    if args.verbose then
        output = ut.readFile(tmpExecOutput)
        if string.len(output) > 0 then
            log.logwrite(output)
        end
    end

    errOutput = ut.readFile(tmpExecErrorOutput)
    
    if string.len(errOutput) > 0 then
        log.warn("[EXEC]: An error seems to have occured by executing: " .. name .. " ('" .. task .. "')\n" .. errOutput)
    end

    name = ut.parseArgs(name, "exec")
    if suc ~= 0 then
        if printErrorMsg ~= false then
            log.err("[EXEC]: " .. name .. ": returned an error: " .. tostring(suc) .. "\n")
        else
            log.warn("[EXEC]: " .. name .. ": returned an error: " .. tostring(suc) .. "\n")
        end
        
        return false, suc
    end

    return true, suc
end

local function rsConfBackupEnding(s)
    local ending = "\t.\n"

    if string.find(s, "\t") ~= nil then
        ending = "\n"
    end

    return ending
end

local function getTask(taskName)
    local task = conf[taskName]
    if type(task) == "table" then
        task.name = taskName
    end
    return task
end

local function getSnapshotAmount(task, allRetainsExisting, alternativePath)
    local amount = task.amount
    local path = task.snapshotPath

    if alternativePath then
        path = alternativePath
    end

    if tostring(amount) == "-1" then 
        amount = 0
        if lfs.attributes(path) == nil then
            exec("mkdir -p " .. path)
        end
        for fileName in lfs.dir(path) do
            local ending
            for s in string.gmatch(fileName, "[^.]+") do
                ending = s
            end

            if ending ~= nil and string.sub(fileName, 0, -(string.len(ending) +2)) == task.name then
                if tonumber(ending) > amount then
                    amount = tonumber(ending)
                end
            end
        end

        if allRetainsExisting then
            amount = amount +1
        else
            amount = amount +2
        end
    end

    return amount
end

local function prepareRsConf(task, allRetainsExisting)
    local tmpRsConf = rsnapshotConf
    local amount = getSnapshotAmount(task, allRetainsExisting)

    tmpRsConf = tmpRsConf .. "snapshot_root\t" .. task.snapshotPath .. "\nretain\t" .. task.name .. "\t" .. amount .. "\n"

    return tmpRsConf
end

local function inherit(task, tmpRsConf, internalData)
    -- pre exec
    -- human error check
    if task.getFrom ~= nil then
        if task.getFrom ~= nil or true then --necessary?
            if task.remotePath ~= nil or task.remotePathList ~= nil then
                print("[WARNING]: 'getFrom' is set in the task ’" .. task.name .. "’. 'remotePath' as well as 'remotePathList’ will be ignored!")

                task.remotePathList = nil
            end
            if task.snapshotPath ~= nil then
                print("[WARNING]: 'getFrom' is set in the task ’" .. task.name .. "’. 'snapshotPath' will be ignored. 'snapshotPath' from the '" .. task.getFrom .. "' task will be used instead")
            end
        end
        if conf[task.getFrom] == nil then 
            log.err("Task '" .. task.name .. "’ tries to getFrom '" .. task.getFrom .. "'. but '" .. task.getFrom .. "' is not defined in '" .. args.confFile .. "'\n")
            return false
        end
        if task.getFrom == task.name then 
            log.err("Task '" .. task.name .. "’ tries to getFrom itself. Thats not a legal option\n")
            return false
        end
    end
    if internalData and internalData.taskList and internalData.taskList[task.name] then
        log.err("getFrom loop. Cant process task '" .. taskList.firstTask .. "'!\n")
        return false
    end
    -- exec
    local motherTask = getTask(task.getFrom)

    if internalData == nil then
        internalData = {
            taskList = {
                firstTask = task.name,
            },
            originalTask = task.name,
        }
    end
    internalData.taskList[task.name] = true

    if task.getFrom ~= nil then
        _, tmpRsConf = inherit(motherTask, nil, internalData)
        if tmpRsConf == false then
            return false
        end
    else
        internalData.motherTask = task
    end

    if task.getFrom == nil then
        tmpRsConf = prepareRsConf(task, true)
    else    
        local amount = getSnapshotAmount(task, true, internalData.motherTask.snapshotPath)
        if task.name == internalData.originalTask then
            amount = amount +1
        end

        tmpRsConf = tmpRsConf .. "retain\t" .. task.name .. "\t" .. amount .. "\n"
    end

    return true, tmpRsConf, internalData.motherTask
end

local function getTime()
    return "[" .. os.date("%Y-%m-%d %H:%M") .. "]"
end

local function onError(...)
    local msg = ""

    for _, s in ipairs({...}) do
        msg = msg .. s
    end

    if conf.ltrs.onError ~= nil then
        os.execute(conf.ltrs.onError .. " " .. msg)
    end
end

function log.logwrite(...)
    if logfile ~= nil and logfile.write ~= nil then
        logfile:write(getTime(), ...)
        logfile:flush()
    else
        io.stderr:write(getTime() .. "[ERROR]: Can't write to logfile!\n")
    end
end

function log.write(...)
    log.logwrite("[INFO]: ", ..., "\n")
    io.write(getTime(), "[INFO]: ", ..., "\n")
end

function log.warn(...)
    log.logwrite("[WARN]: ", ..., "\n")
    io.write(getTime(), "[WARN]: ", ..., "\n")
end

function log.err(...)
    log.logwrite("[ERROR]: ", ..., "\n")
    io.stderr:write(getTime(), "[ERROR]: ", ..., "\n")
    onError(getTime(), "[ERROR]: ", ...)
end

function log.fatal(...)
    log.logwrite("[FATAL]: ", ..., "\n")
    io.stderr:write(getTime(), "[FATAL]: ", ..., "\n")
    os.exit(1)
    onError(getTime(), "[FATAL]: ", ...)
end

--===== pre execution =====--
do -- load configs and open logfile
    if lfs.attributes(args.confFile) == nil then
        log.fatal("Cant find ltrs config file\n")
    else
        conf = lip.load(args.confFile)
    end

    do --open logfile
        local path = ut.seperatePath(conf.ltrs.logfile)
        if lfs.attributes(path) == nil then
            if exec("mkdir -p " .. path) == false then
                log.err("Can't create lofgile path:'" .. path .. "'!\n")
            end
        end
    
        local localLogfile, err = io.open(conf.ltrs.logfile, "w+")
    
        if localLogfile == nil then
            log.err("Can't open logfile '" .. conf.ltrs.logfile .. "'!\n\t" .. tostring(err) .. "\n")
        else
            logfile = localLogfile
        end
    end

    if lfs.attributes(args.rsConfFile) == nil then
        log.fatal("Cant find rsnapshot config file\n")
    else
        rsnapshotConf = ut.readFile("rsnapshot.conf")
    end

    if args.logfile ~= nil then
        conf.ltrs.logfile = args.logfile
    end
    do
        local onErrorFile
        
        if args.onError ~= nil then
            conf.ltrs.onError = args.onError
        end

        if lfs.attributes(conf.ltrs.onError) == nil then
            log.warn("onError file is not existing.")
        end
    end
end

-- create tmp dir of not existing.
if lfs.attributes(tmpConfPath) == nil then
    exec("mkdir -p " .. tmpConfPath)
end

--simulate error
if args.simulateError then
    log.err("Simulatet error")
    os.exit(1)
end

--===== start executing tasks =====--
for _, s in ipairs({...}) do
    fullArgList = fullArgList .. s .. " "
end
log.write("Start executing ltrs with following arguments:\n\t'" .. fullArgList .. "'")

local hasExecutetTasks = false
for _, taskName in ipairs(args.tasks) do
    hasExecutetTasks = true
    if getTask(taskName) ~= nil then
        local task = getTask(taskName)
        local tmpRsConfFile = io.open(tmpConfPath .. "/" .. taskName, "w")
        local tmpRsConf

        if string.find(task.name, "%.") ~= nil then
            log.err("Task '" .. task.name .. "' has a dot (.) inside. Thats not a legal task name. The task will be ignored")
            goto post_task_exec
        end

        log.write("Execute task: " .. taskName)

        if task.getFrom == nil then
            tmpRsConf = prepareRsConf(task, false)
        else
            local suc, trsc, motherTask = inherit(task)
            tmpRsConf = trsc
            local newTask = {}

            for i, c in pairs(task) do
                newTask[i] = c
            end

            task = newTask
            task.snapshotPath = motherTask.snapshotPath
            task.remotePath = motherTask.remotePath
            task.remotePathList = motherTask.remotePathList

            if suc == false then
                goto post_task_exec
            end
        end

        if task.remotePath ~= nil then
            tmpRsConf = tmpRsConf ..  "backup\t" .. task.remotePath .. rsConfBackupEnding(task.remotePath)
        end

        if lfs.attributes(task.remotePathList or "") ~= nil then
            for line in io.lines(task.remotePathList) do
                tmpRsConf = tmpRsConf .. "backup\t" .. line .. rsConfBackupEnding(line)
            end
        end

        tmpRsConfFile:write(tmpRsConf)
        tmpRsConfFile:close()

        if exec("rsnapshot " .. args.rsArgs .. " -c " .. tmpConfPath .. "/" .. taskName .. " " .. taskName, "rsnapshot", false) then
            for path in io.popen("find " .. task.snapshotPath .. " -maxdepth 1 -name '" .. task.name .. ".*' -mtime +" .. task.lifetime):lines() do
                local _, fileName, ending = ut.seperatePath(path)
                log.write("Delete old snapshot: " .. fileName .. ending)
                exec("rm -r " .. path, "rm")
            end
            
            if args.keepTmpRsConfFiles ~= true then
                exec("rm " .. tmpConfPath .. "/" .. taskName, "rm")
            end
        else
            log.err("Could not create backup for task: " .. task.name .. "!")
        end

        ::post_task_exec::
    else
        log.err("Task '" .. taskName .. "' is not defined in '" .. args.confFile .. "'\n")
    end
end

if not hasExecutetTasks and string.len(args.rsArgs) > 0 then
    exec("rsnapshot " .. args.rsArgs)
end

--===== post exec =====--
log.write("Task execution is done")

do -- cleanup logs
    local path, fileName, ending = ut.seperatePath(conf.ltrs.logfile)
    local currentTime = os.date("%Y%m%d%H%M")
    local newFileName = fileName .. "-" .. currentTime .. ending or ""
    local logfilePath = ut.seperatePath(conf.ltrs.logfile)

    log.write("Cleanup logfiles")

    -- delete old logfiles
    for path in io.popen("find " .. logfilePath .. "/* -maxdepth 1 -mtime +" .. conf.ltrs.logfileLifetime):lines() do
        local _, fileName, ending = ut.seperatePath(path)
        log.write("Delete old logfile: " .. fileName .. ending)
        exec("rm -r " .. path, "rm")
    end

    if lfs.attributes(conf.ltrs.logfile) ~= nil then
        local sameLogfileNames = 1
        while lfs.attributes(path .. "/" .. newFileName) ~= nil do
            newFileName = fileName .. "-" .. currentTime .. "_" .. tostring(sameLogfileNames) .. ending or ""
            sameLogfileNames = sameLogfileNames +1
        end

        exec("cp " .. conf.ltrs.logfile .. " " .. path .. "/" .. newFileName, "cp")
    end

    logfile:close()
end

